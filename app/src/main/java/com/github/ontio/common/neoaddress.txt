    public static Address addressFromPubKeyNeo(byte[] publicKey) throws Exception {
        ScriptBuilder sb = new ScriptBuilder();
        sb.push(publicKey);
        sb.add(ScriptOp.OP_CHECKSIG);
        return new Address(Digest.hash160(sb.toArray()));
    }

    public static Address addressFromMultiPubKeysNeo(int m, byte[]... publicKeys) throws Exception {
        if (m <= 0 || m > publicKeys.length || publicKeys.length > 24) {
            throw new SDKException(ErrorCode.ParamError);
        }
        try (ScriptBuilder sb = new ScriptBuilder()) {
            sb.push(BigInteger.valueOf(m));
            ECPoint[] pks = new ECPoint[publicKeys.length];
            for (int i = 0; i < publicKeys.length; i++) {
                pks[i] = ECC.secp256r1.getCurve().decodePoint(publicKeys[i]);
            }
            List<ECPoint> pksList = Arrays.asList(pks);
            Collections.sort(pksList, new Comparator<ECPoint>() {
                @Override
                public int compare(ECPoint o1, ECPoint o2) {
                    if (o1.getYCoord().toString().compareTo(o2.getYCoord().toString()) == 0) {
                        return o1.getXCoord().toString().compareTo(o2.getXCoord().toString());
                    }
                    return o1.getYCoord().toString().compareTo(o2.getYCoord().toString());
               }
            });
            ECPoint[] ecPoints = pksList.toArray(new ECPoint[pksList.size()]);

            for (ECPoint publicKey : ecPoints) {
                System.out.println(Helper.toHexString(publicKey.getEncoded(true)));
                sb.push(publicKey.getEncoded(true));
            }
            sb.push(BigInteger.valueOf(publicKeys.length));
            sb.add(ScriptOp.OP_CHECKMULTISIG);
            return new Address(Digest.hash160(sb.toArray()));
        }
    }


    @Test
    public void getNeoAddress() throws Exception {
        final String privatekey1 = "49855b16636e70f100cc5f4f42bc20a6535d7414fb8845e7310f8dd065a97221";
        final String privatekey2 = "1094e90dd7c4fdfd849c14798d725ac351ae0d924b29a279a9ffa77d5737bd96";
        final String privatekey3 = "bc254cf8d3910bc615ba6bf09d4553846533ce4403bc24f58660ae150a6d64cf";
        final String privatekey4 = "06bda156eda61222693cc6f8488557550735c329bc7ca91bd2994c894cd3cbc8";
        final String privatekey5 = "f07d5a2be17bde8632ec08083af8c760b41b5e8e0b5de3703683c3bdcfb91549";

        com.github.ontio.account.Account acct1 = new com.github.ontio.account.Account(Helper.hexToBytes(privatekey1),ontSdk.signatureScheme);
        com.github.ontio.account.Account acct2 = new com.github.ontio.account.Account(Helper.hexToBytes(privatekey2),ontSdk.signatureScheme);
        com.github.ontio.account.Account acct3 = new com.github.ontio.account.Account(Helper.hexToBytes(privatekey3),ontSdk.signatureScheme);
        com.github.ontio.account.Account acct4 = new com.github.ontio.account.Account(Helper.hexToBytes(privatekey4),ontSdk.signatureScheme);
        com.github.ontio.account.Account acct5 = new com.github.ontio.account.Account(Helper.hexToBytes(privatekey5),ontSdk.signatureScheme);

        Address addr = Address.addressFromMultiPubKeysNeo(5,acct1.serializePublicKey(),acct2.serializePublicKey(),
                acct3.serializePublicKey(),acct4.serializePublicKey(),acct5.serializePublicKey());
        System.out.println(addr.toBase58());
    }
